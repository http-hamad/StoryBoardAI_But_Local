# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import storyboardai_pb2 as storyboardai__pb2


class StoryServiceStub(object):
    """--- Story (text) ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateStory = channel.unary_unary(
                '/storyboardai.StoryService/GenerateStory',
                request_serializer=storyboardai__pb2.TextRequest.SerializeToString,
                response_deserializer=storyboardai__pb2.TextResponse.FromString,
                )


class StoryServiceServicer(object):
    """--- Story (text) ---
    """

    def GenerateStory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateStory': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateStory,
                    request_deserializer=storyboardai__pb2.TextRequest.FromString,
                    response_serializer=storyboardai__pb2.TextResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'storyboardai.StoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StoryService(object):
    """--- Story (text) ---
    """

    @staticmethod
    def GenerateStory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storyboardai.StoryService/GenerateStory',
            storyboardai__pb2.TextRequest.SerializeToString,
            storyboardai__pb2.TextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ImageServiceStub(object):
    """--- Images ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateImages = channel.unary_unary(
                '/storyboardai.ImageService/GenerateImages',
                request_serializer=storyboardai__pb2.ImageRequest.SerializeToString,
                response_deserializer=storyboardai__pb2.ImageResponse.FromString,
                )


class ImageServiceServicer(object):
    """--- Images ---
    """

    def GenerateImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateImages': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateImages,
                    request_deserializer=storyboardai__pb2.ImageRequest.FromString,
                    response_serializer=storyboardai__pb2.ImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'storyboardai.ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """--- Images ---
    """

    @staticmethod
    def GenerateImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storyboardai.ImageService/GenerateImages',
            storyboardai__pb2.ImageRequest.SerializeToString,
            storyboardai__pb2.ImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VoiceServiceStub(object):
    """--- Voice ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateVoice = channel.unary_unary(
                '/storyboardai.VoiceService/GenerateVoice',
                request_serializer=storyboardai__pb2.TextRequest.SerializeToString,
                response_deserializer=storyboardai__pb2.AudioResponse.FromString,
                )


class VoiceServiceServicer(object):
    """--- Voice ---
    """

    def GenerateVoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateVoice': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateVoice,
                    request_deserializer=storyboardai__pb2.TextRequest.FromString,
                    response_serializer=storyboardai__pb2.AudioResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'storyboardai.VoiceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VoiceService(object):
    """--- Voice ---
    """

    @staticmethod
    def GenerateVoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storyboardai.VoiceService/GenerateVoice',
            storyboardai__pb2.TextRequest.SerializeToString,
            storyboardai__pb2.AudioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VideoServiceStub(object):
    """--- Video ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateVideo = channel.unary_unary(
                '/storyboardai.VideoService/GenerateVideo',
                request_serializer=storyboardai__pb2.VideoRequest.SerializeToString,
                response_deserializer=storyboardai__pb2.VideoResponse.FromString,
                )


class VideoServiceServicer(object):
    """--- Video ---
    """

    def GenerateVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateVideo,
                    request_deserializer=storyboardai__pb2.VideoRequest.FromString,
                    response_serializer=storyboardai__pb2.VideoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'storyboardai.VideoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoService(object):
    """--- Video ---
    """

    @staticmethod
    def GenerateVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storyboardai.VideoService/GenerateVideo',
            storyboardai__pb2.VideoRequest.SerializeToString,
            storyboardai__pb2.VideoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
